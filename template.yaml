AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ghcn-api

  Sample SAM Template for ghcn-api


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeUri: src/
    Timeout: 3

Parameters:
  NotificationBucket:
    Type: String
    Description: S3 bucket that's used for the Lambda event notification
    Default: ghcn-api-data-archive
  TableName:
    Type: String
    Description: dynameDB table name
    Default: ghcn-api

Resources:
  HelloAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: 2.0
        info:
          title:!Ref: AWS::StackName
        paths:
          /:
            x-amazon-apigateway-any-method:
              security:
                - sigv4: []
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getDataFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

          /put_list:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getDataFunction.Arn}/invocations
              responses: {}

          /table:
            x-amazon-apigateway-any-method:
              security:
                - sigv4: []
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string

              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getDataFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy




  getDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
#      CodeUri: src/
      Handler: app.app
      Runtime: python3.6
      Policies:
          DynamoDBCrudPolicy:
            TableName:
              !Ref ghcnTable
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: any
            RestApiId:
              Ref: HelloAPI
        ListFiles:
          Type: Api
          Properties:
            Path: /table
            Method: any
            RestApiId:
              Ref: HelloAPI

        GetFileName:
          Type: Api
          Properties:
            Path: /put_list
            Method: any


## s3 notification
  S3NotificationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.6
      Role: !GetAtt LambdaRole.Arn
      Handler: notification.lambda_handler


  DataArchiveS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref NotificationBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt S3NotificationFunction.Arn


  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3NotificationFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${NotificationBucket}

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'S3 notification and DB access'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: Cloudwatch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: SESFullAcess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ses:*"
                Resource: "*"
        - PolicyName: dynamoDB_access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:List*
                  - dynamodb:DescribeReservedCapacity*
                  - dynamodb:DescribeLimits
                  - dynamodb:DescribeTimeToLive
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:CreateTable
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                Resource:
                  - !Sub arn:aws:dynamodb:*:*:table/${TableName}
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource:
                  - !Sub arn:aws:s3:::${NotificationBucket}
                  - !Sub arn:aws:s3:::${NotificationBucket}/*



# website host
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: ghcn-api-website-host
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - POST
            MaxAge: 3000
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html


  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket


# db table
  ghcnTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: Key
          AttributeType: S
      KeySchema:
        - AttributeName: Key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  getDataApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/table"
  getDataFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt getDataFunction.Arn
  getDataFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt getDataFunctionRole.Arn

  WebsiteURL:
    Value: !GetAtt S3Bucket.WebsiteURL
    Description: URL for website hosted on S3

  ApiGWURL:
    Value: https://i7dtgqtcvd.execute-api.us-east-2.amazonaws.com/dev/table
    Description: API Gateway endpoint

